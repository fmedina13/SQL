----In this SQL, I'm querying a database ("chinook") with multiple tables in it to quantify statistics about a digital media store and its customers, employees, and sales.

--#1: Show Customers (their full names, customer ID, and country) who are not in the US.
SELECT FirstName,
LastName,
Customerid,
Country
FROM customers
WHERE Country<>'USA';

--#2: Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.
SELECT customers.FirstName,
customers.LastName,
invoices.InvoiceId,
invoices.InvoiceDate,
invoices.BillingCountry
FROM customers
LEFT JOIN invoices
ON customers.CustomerId=invoices.CustomerId
WHERE customers.Country='Brazil';

--#3: Show the Employees who are Sales Agents.
SELECT FirstName,
LastName,
Title
FROM employees
WHERE Title like 'Sales%Agent';

--#4: Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.
SELECT employees.FirstName,
employees.LastName,
invoices.InvoiceId
FROM employees
LEFT JOIN customers
ON employees.EmployeeId=customers.SupportRepId
LEFT JOIN invoices
ON invoices.CustomerId=customers.CustomerId
WHERE Title like 'Sales%Agent';

--#5: Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
SELECT invoices.InvoiceId,
invoices.Total,
customers.FirstName,
customers.LastName,
customers.Country,
employees.FirstName,
employees.LastName
FROM invoices
FULL JOIN customers
ON invoices.CustomerId=customers.CustomerId
LEFT JOIN employees
ON employees.EmployeeId=customers.SupportRepId;

--#6: What are the total sales for 2009?
SELECT sum(invoice_items.Quantity),
sum(invoice_items.Quantity*invoice_items.UnitPrice)
FROM invoice_items
INNER JOIN invoices
ON invoice_items.InvoiceId=invoices.InvoiceId
WHERE InvoiceDate like '%2009%';

--#7: Write a query that includes the purchased track name with each invoice line ID.
SELECT invoice_items.InvoiceLineId,
tracks.Name
FROM invoice_items
INNER JOIN tracks
ON invoice_items.TrackId=tracks.TrackId
ORDER BY tracks.Name ASC;

--#8: Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT invoice_items.InvoiceLineId,
tracks.Name AS Song_Title,
artists.Name AS Artist
FROM invoice_items
LEFT JOIN tracks
ON invoice_items.TrackId=tracks.TrackId
LEFT JOIN albums
ON tracks.AlbumId=albums.AlbumId
LEFT JOIN artists
ON albums.ArtistId=artists.ArtistId
ORDER BY invoice_items.InvoiceLineId ASC;


--#9: Which sales agent made the most dollars in sales in 2009?
SELECT employees.FirstName,
employees.LastName,
sum(invoice_items.Quantity*invoice_items.UnitPrice) AS Sales_in_dollars
FROM employees
LEFT JOIN customers
ON employees.EmployeeId=customers.SupportRepId
LEFT JOIN invoices
ON customers.CustomerId=invoices.CustomerId
LEFT JOIN invoice_items
ON invoices.InvoiceId=invoice_items.InvoiceId
WHERE employees.Title like '%Sales%Agent%'
GROUP BY EmployeeId
ORDER BY Sales_in_dollars DESC LIMIT 1;

--#10: Find the top 3 most popular tracks based on total sales quantity.
SELECT tracks.Name,
sum(invoice_items.Quantity) AS Sales_quantity
FROM tracks
LEFT JOIN invoice_items
ON tracks.TrackId=invoice_items.TrackId
GROUP BY tracks.Name
ORDER BY sales_quantity DESC LIMIT 3;

--#11: Calculate the running total of sales revenue for each customer over time.
SELECT customers.CustomerId,
customers.FirstName,
customers.LastName,
DATE(invoices.InvoiceDate) AS Date,
sum(invoice_items.UnitPrice*invoice_items.UnitPrice) OVER 
(Partition by customers.CustomerId ORDER BY invoices.InvoiceDate) AS Running_total_rev
FROM customers
LEFT JOIN invoices
ON customers.CustomerId=invoices.CustomerId
LEFT JOIN invoice_items
ON invoices.InvoiceId=invoice_items.InvoiceId;

--#12: Determine the number of tracks in each genre and classify the genre as 'Small' (â‰¤10 tracks), 'Medium' (11-50 tracks), or 'Large' (>50 tracks)
SELECT genres.Name AS Genre,
COUNT(tracks.TrackId) AS TrackCount,
CASE WHEN COUNT(tracks.TrackId)>50 THEN 'Large'
WHEN COUNT(tracks.TrackId) between 11 and 50 THEN 'Medium'
WHEN COUNT(tracks.TrackId)<=10 THEN 'Small'
END AS Genre_Classification
FROM genres
LEFT JOIN tracks
ON genres.GenreId=tracks.GenreId
GROUP BY genres.Name
ORDER BY TrackCount DESC;

--#13: Identify the albums that contain the longest total duration of tracks.
SELECT albums.Title,
sum(tracks.Milliseconds) AS Duration
FROM albums
LEFT JOIN tracks
ON albums.AlbumId=tracks.AlbumId
GROUP BY albums.Title
ORDER BY Duration DESC;
